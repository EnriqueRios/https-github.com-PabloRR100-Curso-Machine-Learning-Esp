set.seed(123)
split <- sample.split(datos$Beneficio, SplitRatio = 0.7)
entrenamiento <- subset(datos, split==TRUE)
validacion    <- subset(datos, split==FALSE)
train <- entrenamiento
test  <- validacion
# 4. Construir el Modelo
regresor <- lm(formula = Beneficio ~ .,
data = train)
# 5. Hacer las prediciones para el conjunto de Validación
y_fit  <- predict(regresor, newdata = train)
y_pred <- predict(regresor, newdata = test)
# 7. Calcular el error
library(Metrics)
y_real <- test$Beneficio
RMSE <- rmse(y_real, y_pred)
print(RMSE)
avg <- mean(data$Beneficio)
data$Beneficio
avg <- mean(datos$Beneficio)
cat('RMSE is ', RMSE, ' over an average of: 'avg)
cat('RMSE is ', RMSE, ' over an average of: ', avg)
# 7. Calcular el error
library(Metrics)
y_real <- test$Beneficio
RMSE <- rmse(y_real, y_pred)
print(RMSE)
avg <- mean(datos$Beneficio)
cat('RMSE is ', RMSE, ' over an average of: ', avg)
# 1. Importar librerías
library(caTools)
library(ggplot2)
# 2. Importar datos
datos <- read.csv('../Datos/4.1.Empresas.csv')
# 3. Codificcar variables categóricas
datos$Pais <- factor(datos$Pais,
levels = c('Nueva York', 'California', 'Florida'),
labels = c(1, 2, 3))
datos
# 3. Separar en Entrenamiento y Validación
set.seed(123)
split <- sample.split(datos$Beneficio, SplitRatio = 0.7)
entrenamiento <- subset(datos, split==TRUE)
validacion    <- subset(datos, split==FALSE)
train <- entrenamiento
test  <- validacion
# 4. Construir el Modelo
regresor <- lm(formula = Beneficio ~ .,
data = train)
# 5. Hacer las prediciones para el conjunto de Validación
y_fit  <- predict(regresor, newdata = train)
y_pred <- predict(regresor, newdata = test)
# 7. Calcular el error
library(Metrics)
y_real <- test$Beneficio
RMSE <- rmse(y_real, y_pred)
avg <- mean(datos$Beneficio)
cat('RMSE is ', RMSE, ' over an average of: ', avg)
ggplot2::geom_histogram(data = datos$Beneficio) + xlab('Beneficio (€)')
ggplot2::hist(data = datos$Beneficio) + xlab('Beneficio (€)')
hist(data = datos$Beneficio) + xlab('Beneficio (€)')
qplot(data = datos$Beneficio, geom='histogram')
ggplot(data = datos, aes(datos$Beneficio) + geom_histogram()
ggplot(data = datos, aes(datos$Beneficio)) + geom_histogram()
ggplot(data = datos, aes(datos$Beneficio)) + geom_histogram()
ggplot(data = datos, aes(datos$Beneficio), bins=10) + geom_histogram()
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 10)
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 20)
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fil = 'blue',
alpha = 0.2) +
title('Histograma de Beneficios') +
xlab('Beneficio (€)') +
ylab('Frecuencia')
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fil = 'blue',
alpha = 0.2) +
labs(title('Histograma de Beneficios') +
xlab('Beneficio (€)') +
ylab('Frecuencia'))
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fil = 'blue',
alpha = 0.2) +
title('Histograma de Beneficios') +
xlab('Beneficio (€)') +
ylab('Frecuencia'))
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fil = 'blue',
alpha = 0.2)
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2)
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio')
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia')
ggplot(x=mean(datos$Beneficio, y=seq(0,5,0.1)))
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia') +
ggplot(x=mean(datos$Beneficio, y=seq(0,5,0.1)))
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia') +
abline(v=mean(datos$Beneficio))
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia')
y_real <- test$Beneficio
RMSE <- rmse(y_real, y_pred)
avg <- mean(datos$Beneficio)
cat('RMSE is ', RMSE, ' over an average of: ', avg)
abline(v=v, col='green')
abline(v=vl, col='green')
vl <- mean(datos$Beneficio)
abline(v=vl, col='green')
vl <- mean(datos$Beneficio)
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia')
vl <- mean(datos$Beneficio)
abline(v=vl, col='green')
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia') +
abline(v=mean(datos$Beneficio), col='green')
abline(v=mean(datos$Beneficio), col='green')
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia')
abline(v=mean(datos$Beneficio), col='green')
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia') +
geom_abline(v=mean(datos$Beneficio), col='green')
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia') +
geom_vline(mean(datos$Beneficio), col='green')
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia') +
geom_vline(xintercept = mean(datos$Beneficio), col='green')
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia') +
geom_vline(xintercept = mean(datos$Beneficio), col='brown')
err <- avg * 100 / RMSE
cat('RMSE is ', RMSE, ' over an average of: ', avg, '; consisting on an error of: ', err, '%')
err <- (avg * 100) / RMSE
cat('RMSE is ', RMSE, ' over an average of: ', avg, '; consisting on an error of: ', err, '%')
RMSE <- rmse(y_real, y_pred)
avg <- mean(datos$Beneficio)
err <- (avg * 100) / RMSE
cat('RMSE is ', RMSE, ' over an average of: ', avg, '; consisting on an error of: ', err, '%')
12062 * 100 / 112012.6
# 1. Importar librerías
library(caTools)
library(ggplot2)
# 2. Importar datos
datos <- read.csv('../Datos/4.1.Empresas.csv')
# 3. Codificcar variables categóricas
datos$Pais <- factor(datos$Pais,
levels = c('Nueva York', 'California', 'Florida'),
labels = c(1, 2, 3))
datos
ggplot(data = datos, aes(datos$Beneficio)) +
geom_histogram(bins = 25,
col = 'black',
fill = 'blue',
alpha = 0.2) +
xlab('Beneficio (€)') +
ylab('Frecuencia') +
geom_vline(xintercept = mean(datos$Beneficio), col='brown')
# 3. Separar en Entrenamiento y Validación
set.seed(123)
split <- sample.split(datos$Beneficio, SplitRatio = 0.7)
entrenamiento <- subset(datos, split==TRUE)
validacion    <- subset(datos, split==FALSE)
train <- entrenamiento
test  <- validacion
# 4. Construir el Modelo
regresor <- lm(formula = Beneficio ~ .,
data = train)
# 5. Hacer las prediciones para el conjunto de Validación
y_fit  <- predict(regresor, newdata = train)
y_pred <- predict(regresor, newdata = test)
# 7. Calcular el error
library(Metrics)
y_real <- test$Beneficio
RMSE <- rmse(y_real, y_pred)
avg <- mean(datos$Beneficio)
err <- (avg * 100) / RMSE
cat('RMSE is ', RMSE, ' over an average of: ', avg, '; consisting on an error of: ', err, '%')
err <- (RMSE * 100) / avg
cat('RMSE is ', RMSE, ' over an average of: ', avg, '; consisting on an error of: ', err, '%')
# 2. Importar datos
datos <- read.csv('../Datos/4.1.Salarios2.csv')
datos <- datos[2:3] # Eliminamos la columna del título del puesto y nos quedamos con el nivel
head(datos, 10)
ggplot() +
geom_line(aes(x=datos$Nivel, y=datos$Salario), colour='blue') +
ggtitle('Relación entre Salario y Nivel de puesto de trabajo') +
xlab('Nivel') +
ylab('Salario')
# 4. Construir el Modelo
# 4.1 Tenemos que construir una nueva variable para cada grado de polinomio que queramos. Si por ejemplo, queremos un polinomio de grado 4: (Y = C + aX + bX^2 + cX^3 + dX4)
datos$Nivel2 = datos$Nivel^2
datos$Nivel3 = datos$Nivel^3
datos$Nivel4 = datos$Nivel^4
head(datos, 5)
regresor_lineal <- lm(formula = Salario ~ ., data = datos)
regresor_polino <- lm(formula = Salario ~ ., data = datos)
# 5. Hacer las prediciones para el conjunto de Validación
y_fit_lineal <- predict(regresor_lineal, newdata = datos)
y_fit_polino <- predict(regresor_polino, newdata = datos)
# 6. Echemos un vistazo a la pinta que tienen las predicciones
# 6.1. Para el conjunto de entrenamiento
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario')
# 6.2. Para el conjunto de validación
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario')
# 6.2. Para el conjunto de validación
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario')
# 6. Echemos un vistazo a la pinta que tienen las predicciones
# 6.1. Para el conjunto de entrenamiento
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario')
# 6.2. Para el conjunto de validación
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario')
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line((aes(datos$Nivel, y_fit_lineal, colour='purple'))) +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue'))) +
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='purple') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario')
regresor_lineal <- lm(formula = Salario ~ Nivel, data = datos)
regresor_polino <- lm(formula = Salario ~ ., data = datos)
# 5. Hacer las prediciones para el conjunto de Validación
y_fit_lineal <- predict(regresor_lineal, newdata = datos)
y_fit_polino <- predict(regresor_polino, newdata = datos)
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='purple') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario')
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='purple', label='ln') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue', label='pol') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario')
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='purple', label='ln') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue', label='pol') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario') +
legend()
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='purple') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
scale_shape_discrete(labels=c('Linear', 'Polynomial'))
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='purple') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario') +
scale_shape_discrete(labels=c('Linear', 'Polynomial'))
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='purple') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario') +
legend(legend=c('Lienar', 'Polynomial'), col=c('purple', 'blue'))
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='purple') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario') +
legend(0, 0, legend=c('Lienar', 'Polynomial'), col=c('purple', 'blue'))
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='purple') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario')
y_real <- datos$Salario
# 7. Calcular el error
library(Metrics)
y_real <- datos$Salario
RMSE_lineal <- rmse(y_real, y_fit_lineal)
RMSE_polino <- rmse(y_real, y_fit_polino)
l
# 2. Importar datos
datos <- read.csv('../Datos/4.1.Salarios2.csv')
datos <- datos[2:3] # Eliminamos la columna del título del puesto y nos quedamos con el nivel
head(datos, 10)
ggplot() +
geom_line(aes(x=datos$Nivel, y=datos$Salario), colour='blue') +
ggtitle('Relación entre Salario y Nivel de puesto de trabajo') +
xlab('Nivel') +
ylab('Salario')
# 3. Histograma de Salario
ggplot() +
hist(x=datos$Salario)
# 3. Histograma de Salario
ggplot() +
geom_histogram(x = datos$Salario)
# 3. Histograma de Salario
ggplot() +
geom_histogram(x = datos$Salario,
bins=10)
# 3. Histograma de Salario
ggplot(data=datos, aes(datos$Salario)) +
geom_histogram(bins=10,
col='black',
fill='blue',
alpha=0.2)
# 3. Histograma de Salario
ggplot(data=datos, aes(datos$Salario)) +
geom_histogram(bins=10,
col='black',
fill='blue',
alpha=0.2) +
geom_vline(xintercept = mean(datos$Salario),
col='purple')
# 3. Histograma de Salario
ggplot(data=datos, aes(datos$Salario)) +
geom_histogram(bins=10,
col='black',
fill='blue',
alpha=0.2) +
geom_vline(xintercept = mean(datos$Salario),
col='purple') +
xlab('Salario') +
ylab('Frecuencia')
err <- RMSE_polino * 100 / avg
cat('Teniendo en cuenta un salario medio de ', avg, ' el error es del ', err, '%')
# 1. Importar librerías
library(caTools)
library(ggplot2)
# 2. Importar datos
datos <- read.csv('../Datos/4.1.Salarios2.csv')
datos <- datos[2:3] # Eliminamos la columna del título del puesto y nos quedamos con el nivel
head(datos, 10)
ggplot() +
geom_line(aes(x=datos$Nivel, y=datos$Salario), colour='blue') +
ggtitle('Relación entre Salario y Nivel de puesto de trabajo') +
xlab('Nivel') +
ylab('Salario')
# 3. Histograma de Salario
ggplot(data=datos, aes(datos$Salario)) +
geom_histogram(bins=10,
col='black',
fill='blue',
alpha=0.2) +
geom_vline(xintercept = mean(datos$Salario),
col='purple') +
xlab('Salario') +
ylab('Frecuencia')
# 3. Separar en Entrenamiento y Validación
# 4. Construir el Modelo
# 4.1 Tenemos que construir una nueva variable para cada grado de polinomio que queramos. Si por ejemplo, queremos un polinomio de grado 4: (Y = C + aX + bX^2 + cX^3 + dX4)
datos$Nivel2 = datos$Nivel^2
datos$Nivel3 = datos$Nivel^3
datos$Nivel4 = datos$Nivel^4
head(datos, 5)
regresor_lineal <- lm(formula = Salario ~ Nivel, data = datos)
regresor_polino <- lm(formula = Salario ~ ., data = datos)
# 5. Hacer las prediciones para el conjunto de Validación
y_fit_lineal <- predict(regresor_lineal, newdata = datos)
y_fit_polino <- predict(regresor_polino, newdata = datos)
# 6. Echemos un vistazo a la pinta que tienen las predicciones
ggplot() +
geom_point(aes(datos$Nivel, datos$Salario), colour='red') +
geom_line(aes(datos$Nivel, y_fit_lineal), colour='purple') +
geom_line(aes(datos$Nivel, y_fit_polino), colour='blue') +
ggtitle('Regresión Polinómica') +
xlab('Años de experiencia') +
ylab('Salario')
# 7. Calcular el error
library(Metrics)
y_real <- datos$Salario
RMSE_lineal <- rmse(y_real, y_fit_lineal)
RMSE_polino <- rmse(y_real, y_fit_polino)
cat('El error lineal es de ', RMSE_lineal, ' mientras que el error del polinómico es de ', RMSE_lineal)
avg <- mean(datos$Salario)
err <- RMSE_polino * 100 / avg
cat('Teniendo en cuenta un salario medio de ', avg, ' el error es del ', err, '%')
# 3. Histograma de Salario
ggplot(data=datos, aes(datos$Salario)) +
geom_histogram(bins=10,
col='black',
fill='blue',
alpha=0.2) +
xlab('Salario') +
ylab('Frecuencia') +
geom_vline(xintercept = mean(datos$Salario), col='brown')
